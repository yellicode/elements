/*
* Copyright (c) 2018 Yellicode
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

/**
* This code was generated by a tool.
* 
* Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
*/
import * as model from './interfaces';

export class ElementTypeUtility
{
	/**
	* Returns true if the elementType is a NamedElement or one of its descendants.
	*/
	public static isNamedElement(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.association: return true;
			case model.ElementType.class: return true;
			case model.ElementType.dataType: return true;
			case model.ElementType.enumeration: return true;
			case model.ElementType.enumerationLiteral: return true;
			case model.ElementType.interface: return true;
			case model.ElementType.literalBoolean: return true;
			case model.ElementType.literalInteger: return true;
			case model.ElementType.literalNull: return true;
			case model.ElementType.literalReal: return true;
			case model.ElementType.literalString: return true;
			case model.ElementType.literalUnlimitedNatural: return true;
			case model.ElementType.model: return true;
			case model.ElementType.operation: return true;
			case model.ElementType.package: return true;
			case model.ElementType.parameter: return true;
			case model.ElementType.primitiveType: return true;
			case model.ElementType.profile: return true;
			case model.ElementType.property: return true;
			case model.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a RedefinableElement or one of its descendants.
	*/
	public static isRedefinableElement(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.association: return true;
			case model.ElementType.class: return true;
			case model.ElementType.dataType: return true;
			case model.ElementType.enumeration: return true;
			case model.ElementType.interface: return true;
			case model.ElementType.operation: return true;
			case model.ElementType.primitiveType: return true;
			case model.ElementType.property: return true;
			case model.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a PackageableElement or one of its descendants.
	*/
	public static isPackageableElement(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.association: return true;
			case model.ElementType.class: return true;
			case model.ElementType.dataType: return true;
			case model.ElementType.enumeration: return true;
			case model.ElementType.interface: return true;
			case model.ElementType.model: return true;
			case model.ElementType.package: return true;
			case model.ElementType.primitiveType: return true;
			case model.ElementType.profile: return true;
			case model.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Type or one of its descendants.
	*/
	public static isType(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.association: return true;
			case model.ElementType.class: return true;
			case model.ElementType.dataType: return true;
			case model.ElementType.enumeration: return true;
			case model.ElementType.interface: return true;
			case model.ElementType.primitiveType: return true;
			case model.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Classifier or one of its descendants.
	*/
	public static isClassifier(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.association: return true;
			case model.ElementType.class: return true;
			case model.ElementType.dataType: return true;
			case model.ElementType.enumeration: return true;
			case model.ElementType.interface: return true;
			case model.ElementType.primitiveType: return true;
			case model.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a MemberedClassifier or one of its descendants.
	*/
	public static isMemberedClassifier(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.class: return true;
			case model.ElementType.dataType: return true;
			case model.ElementType.enumeration: return true;
			case model.ElementType.interface: return true;
			case model.ElementType.primitiveType: return true;
			case model.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a StructuredClassifier or one of its descendants.
	*/
	public static isStructuredClassifier(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.class: return true;
			case model.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a BehavioredClassifier or one of its descendants.
	*/
	public static isBehavioredClassifier(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.class: return true;
			case model.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Class or one of its descendants.
	*/
	public static isClass(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.class: return true;
			case model.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Stereotype or one of its descendants.
	*/
	public static isStereotype(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.stereotype;
	}

	/**
	* Returns true if the elementType is a Package or one of its descendants.
	*/
	public static isPackage(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.package: return true;
			case model.ElementType.model: return true;
			case model.ElementType.profile: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Profile or one of its descendants.
	*/
	public static isProfile(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.profile;
	}

	/**
	* Returns true if the elementType is a OrderedElement or one of its descendants.
	*/
	public static isOrderedElement(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.enumerationLiteral: return true;
			case model.ElementType.operation: return true;
			case model.ElementType.parameter: return true;
			case model.ElementType.property: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a TypedElement or one of its descendants.
	*/
	public static isTypedElement(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.literalBoolean: return true;
			case model.ElementType.literalInteger: return true;
			case model.ElementType.literalNull: return true;
			case model.ElementType.literalReal: return true;
			case model.ElementType.literalString: return true;
			case model.ElementType.literalUnlimitedNatural: return true;
			case model.ElementType.parameter: return true;
			case model.ElementType.property: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a ValueSpecification or one of its descendants.
	*/
	public static isValueSpecification(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.literalBoolean: return true;
			case model.ElementType.literalInteger: return true;
			case model.ElementType.literalNull: return true;
			case model.ElementType.literalReal: return true;
			case model.ElementType.literalString: return true;
			case model.ElementType.literalUnlimitedNatural: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a MultiplicityElement or one of its descendants.
	*/
	public static isMultiplicityElement(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.parameter: return true;
			case model.ElementType.property: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Feature or one of its descendants.
	*/
	public static isFeature(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.operation: return true;
			case model.ElementType.property: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a StructuralFeature or one of its descendants.
	*/
	public static isStructuralFeature(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.property;
	}

	/**
	* Returns true if the elementType is a Relationship or one of its descendants.
	*/
	public static isRelationship(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.association: return true;
			case model.ElementType.generalization: return true;
			case model.ElementType.interfaceRealization: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Property or one of its descendants.
	*/
	public static isProperty(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.property;
	}

	/**
	* Returns true if the elementType is a DataType or one of its descendants.
	*/
	public static isDataType(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.dataType: return true;
			case model.ElementType.enumeration: return true;
			case model.ElementType.primitiveType: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a PrimitiveType or one of its descendants.
	*/
	public static isPrimitiveType(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.primitiveType;
	}

	/**
	* Returns true if the elementType is a Parameter or one of its descendants.
	*/
	public static isParameter(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.parameter;
	}

	/**
	* Returns true if the elementType is a BehavioralFeature or one of its descendants.
	*/
	public static isBehavioralFeature(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.operation;
	}

	/**
	* Returns true if the elementType is a Operation or one of its descendants.
	*/
	public static isOperation(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.operation;
	}

	/**
	* Returns true if the elementType is a Model or one of its descendants.
	*/
	public static isModel(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.model;
	}

	/**
	* Returns true if the elementType is a LiteralSpecification or one of its descendants.
	*/
	public static isLiteralSpecification(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.literalBoolean: return true;
			case model.ElementType.literalInteger: return true;
			case model.ElementType.literalNull: return true;
			case model.ElementType.literalReal: return true;
			case model.ElementType.literalString: return true;
			case model.ElementType.literalUnlimitedNatural: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a LiteralUnlimitedNatural or one of its descendants.
	*/
	public static isLiteralUnlimitedNatural(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.literalUnlimitedNatural;
	}

	/**
	* Returns true if the elementType is a LiteralString or one of its descendants.
	*/
	public static isLiteralString(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.literalString;
	}

	/**
	* Returns true if the elementType is a LiteralReal or one of its descendants.
	*/
	public static isLiteralReal(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.literalReal;
	}

	/**
	* Returns true if the elementType is a LiteralNull or one of its descendants.
	*/
	public static isLiteralNull(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.literalNull;
	}

	/**
	* Returns true if the elementType is a LiteralInteger or one of its descendants.
	*/
	public static isLiteralInteger(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.literalInteger;
	}

	/**
	* Returns true if the elementType is a LiteralBoolean or one of its descendants.
	*/
	public static isLiteralBoolean(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.literalBoolean;
	}

	/**
	* Returns true if the elementType is a DirectedRelationship or one of its descendants.
	*/
	public static isDirectedRelationship(elementType:model.ElementType): boolean
	{
		switch(elementType){
			case model.ElementType.generalization: return true;
			case model.ElementType.interfaceRealization: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a InterfaceRealization or one of its descendants.
	*/
	public static isInterfaceRealization(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.interfaceRealization;
	}

	/**
	* Returns true if the elementType is a Interface or one of its descendants.
	*/
	public static isInterface(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.interface;
	}

	/**
	* Returns true if the elementType is a Generalization or one of its descendants.
	*/
	public static isGeneralization(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.generalization;
	}

	/**
	* Returns true if the elementType is a EnumerationLiteral or one of its descendants.
	*/
	public static isEnumerationLiteral(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.enumerationLiteral;
	}

	/**
	* Returns true if the elementType is a Enumeration or one of its descendants.
	*/
	public static isEnumeration(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.enumeration;
	}

	/**
	* Returns true if the elementType is a Comment or one of its descendants.
	*/
	public static isComment(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.comment;
	}

	/**
	* Returns true if the elementType is a Association or one of its descendants.
	*/
	public static isAssociation(elementType:model.ElementType): boolean
	{
		return elementType === model.ElementType.association;
	}

}

/**
* Asserts that the element is a NamedElement or one of its descendants.
*/
export function isNamedElement(element: model.Element | null): element is model.NamedElement {
	if (!element) return false;
	return ElementTypeUtility.isNamedElement(element.elementType);
}

/**
* Asserts that the element is a RedefinableElement or one of its descendants.
*/
export function isRedefinableElement(element: model.Element | null): element is model.RedefinableElement {
	if (!element) return false;
	return ElementTypeUtility.isRedefinableElement(element.elementType);
}

/**
* Asserts that the element is a PackageableElement or one of its descendants.
*/
export function isPackageableElement(element: model.Element | null): element is model.PackageableElement {
	if (!element) return false;
	return ElementTypeUtility.isPackageableElement(element.elementType);
}

/**
* Asserts that the element is a Type or one of its descendants.
*/
export function isType(element: model.Element | null): element is model.Type {
	if (!element) return false;
	return ElementTypeUtility.isType(element.elementType);
}

/**
* Asserts that the element is a Classifier or one of its descendants.
*/
export function isClassifier(element: model.Element | null): element is model.Classifier {
	if (!element) return false;
	return ElementTypeUtility.isClassifier(element.elementType);
}

/**
* Asserts that the element is a MemberedClassifier or one of its descendants.
*/
export function isMemberedClassifier(element: model.Element | null): element is model.MemberedClassifier {
	if (!element) return false;
	return ElementTypeUtility.isMemberedClassifier(element.elementType);
}

/**
* Asserts that the element is a StructuredClassifier or one of its descendants.
*/
export function isStructuredClassifier(element: model.Element | null): element is model.StructuredClassifier {
	if (!element) return false;
	return ElementTypeUtility.isStructuredClassifier(element.elementType);
}

/**
* Asserts that the element is a BehavioredClassifier or one of its descendants.
*/
export function isBehavioredClassifier(element: model.Element | null): element is model.BehavioredClassifier {
	if (!element) return false;
	return ElementTypeUtility.isBehavioredClassifier(element.elementType);
}

/**
* Asserts that the element is a Class or one of its descendants.
*/
export function isClass(element: model.Element | null): element is model.Class {
	if (!element) return false;
	return ElementTypeUtility.isClass(element.elementType);
}

/**
* Asserts that the element is a Stereotype or one of its descendants.
*/
export function isStereotype(element: model.Element | null): element is model.Stereotype {
	if (!element) return false;
	return ElementTypeUtility.isStereotype(element.elementType);
}

/**
* Asserts that the element is a Package or one of its descendants.
*/
export function isPackage(element: model.Element | null): element is model.Package {
	if (!element) return false;
	return ElementTypeUtility.isPackage(element.elementType);
}

/**
* Asserts that the element is a Profile or one of its descendants.
*/
export function isProfile(element: model.Element | null): element is model.Profile {
	if (!element) return false;
	return ElementTypeUtility.isProfile(element.elementType);
}

/**
* Asserts that the element is a OrderedElement or one of its descendants.
*/
export function isOrderedElement(element: model.Element | null): element is model.OrderedElement {
	if (!element) return false;
	return ElementTypeUtility.isOrderedElement(element.elementType);
}

/**
* Asserts that the element is a TypedElement or one of its descendants.
*/
export function isTypedElement(element: model.Element | null): element is model.TypedElement {
	if (!element) return false;
	return ElementTypeUtility.isTypedElement(element.elementType);
}

/**
* Asserts that the element is a ValueSpecification or one of its descendants.
*/
export function isValueSpecification(element: model.Element | null): element is model.ValueSpecification {
	if (!element) return false;
	return ElementTypeUtility.isValueSpecification(element.elementType);
}

/**
* Asserts that the element is a MultiplicityElement or one of its descendants.
*/
export function isMultiplicityElement(element: model.Element | null): element is model.MultiplicityElement {
	if (!element) return false;
	return ElementTypeUtility.isMultiplicityElement(element.elementType);
}

/**
* Asserts that the element is a Feature or one of its descendants.
*/
export function isFeature(element: model.Element | null): element is model.Feature {
	if (!element) return false;
	return ElementTypeUtility.isFeature(element.elementType);
}

/**
* Asserts that the element is a StructuralFeature or one of its descendants.
*/
export function isStructuralFeature(element: model.Element | null): element is model.StructuralFeature {
	if (!element) return false;
	return ElementTypeUtility.isStructuralFeature(element.elementType);
}

/**
* Asserts that the element is a Relationship or one of its descendants.
*/
export function isRelationship(element: model.Element | null): element is model.Relationship {
	if (!element) return false;
	return ElementTypeUtility.isRelationship(element.elementType);
}

/**
* Asserts that the element is a Property or one of its descendants.
*/
export function isProperty(element: model.Element | null): element is model.Property {
	if (!element) return false;
	return ElementTypeUtility.isProperty(element.elementType);
}

/**
* Asserts that the element is a DataType or one of its descendants.
*/
export function isDataType(element: model.Element | null): element is model.DataType {
	if (!element) return false;
	return ElementTypeUtility.isDataType(element.elementType);
}

/**
* Asserts that the element is a PrimitiveType or one of its descendants.
*/
export function isPrimitiveType(element: model.Element | null): element is model.PrimitiveType {
	if (!element) return false;
	return ElementTypeUtility.isPrimitiveType(element.elementType);
}

/**
* Asserts that the element is a Parameter or one of its descendants.
*/
export function isParameter(element: model.Element | null): element is model.Parameter {
	if (!element) return false;
	return ElementTypeUtility.isParameter(element.elementType);
}

/**
* Asserts that the element is a BehavioralFeature or one of its descendants.
*/
export function isBehavioralFeature(element: model.Element | null): element is model.BehavioralFeature {
	if (!element) return false;
	return ElementTypeUtility.isBehavioralFeature(element.elementType);
}

/**
* Asserts that the element is a Operation or one of its descendants.
*/
export function isOperation(element: model.Element | null): element is model.Operation {
	if (!element) return false;
	return ElementTypeUtility.isOperation(element.elementType);
}

/**
* Asserts that the element is a Model or one of its descendants.
*/
export function isModel(element: model.Element | null): element is model.Model {
	if (!element) return false;
	return ElementTypeUtility.isModel(element.elementType);
}

/**
* Asserts that the element is a LiteralSpecification or one of its descendants.
*/
export function isLiteralSpecification(element: model.Element | null): element is model.LiteralSpecification {
	if (!element) return false;
	return ElementTypeUtility.isLiteralSpecification(element.elementType);
}

/**
* Asserts that the element is a LiteralUnlimitedNatural or one of its descendants.
*/
export function isLiteralUnlimitedNatural(element: model.Element | null): element is model.LiteralUnlimitedNatural {
	if (!element) return false;
	return ElementTypeUtility.isLiteralUnlimitedNatural(element.elementType);
}

/**
* Asserts that the element is a LiteralString or one of its descendants.
*/
export function isLiteralString(element: model.Element | null): element is model.LiteralString {
	if (!element) return false;
	return ElementTypeUtility.isLiteralString(element.elementType);
}

/**
* Asserts that the element is a LiteralReal or one of its descendants.
*/
export function isLiteralReal(element: model.Element | null): element is model.LiteralReal {
	if (!element) return false;
	return ElementTypeUtility.isLiteralReal(element.elementType);
}

/**
* Asserts that the element is a LiteralNull or one of its descendants.
*/
export function isLiteralNull(element: model.Element | null): element is model.LiteralNull {
	if (!element) return false;
	return ElementTypeUtility.isLiteralNull(element.elementType);
}

/**
* Asserts that the element is a LiteralInteger or one of its descendants.
*/
export function isLiteralInteger(element: model.Element | null): element is model.LiteralInteger {
	if (!element) return false;
	return ElementTypeUtility.isLiteralInteger(element.elementType);
}

/**
* Asserts that the element is a LiteralBoolean or one of its descendants.
*/
export function isLiteralBoolean(element: model.Element | null): element is model.LiteralBoolean {
	if (!element) return false;
	return ElementTypeUtility.isLiteralBoolean(element.elementType);
}

/**
* Asserts that the element is a DirectedRelationship or one of its descendants.
*/
export function isDirectedRelationship(element: model.Element | null): element is model.DirectedRelationship {
	if (!element) return false;
	return ElementTypeUtility.isDirectedRelationship(element.elementType);
}

/**
* Asserts that the element is a InterfaceRealization or one of its descendants.
*/
export function isInterfaceRealization(element: model.Element | null): element is model.InterfaceRealization {
	if (!element) return false;
	return ElementTypeUtility.isInterfaceRealization(element.elementType);
}

/**
* Asserts that the element is a Interface or one of its descendants.
*/
export function isInterface(element: model.Element | null): element is model.Interface {
	if (!element) return false;
	return ElementTypeUtility.isInterface(element.elementType);
}

/**
* Asserts that the element is a Generalization or one of its descendants.
*/
export function isGeneralization(element: model.Element | null): element is model.Generalization {
	if (!element) return false;
	return ElementTypeUtility.isGeneralization(element.elementType);
}

/**
* Asserts that the element is a EnumerationLiteral or one of its descendants.
*/
export function isEnumerationLiteral(element: model.Element | null): element is model.EnumerationLiteral {
	if (!element) return false;
	return ElementTypeUtility.isEnumerationLiteral(element.elementType);
}

/**
* Asserts that the element is a Enumeration or one of its descendants.
*/
export function isEnumeration(element: model.Element | null): element is model.Enumeration {
	if (!element) return false;
	return ElementTypeUtility.isEnumeration(element.elementType);
}

/**
* Asserts that the element is a Comment or one of its descendants.
*/
export function isComment(element: model.Element | null): element is model.Comment {
	if (!element) return false;
	return ElementTypeUtility.isComment(element.elementType);
}

/**
* Asserts that the element is a Association or one of its descendants.
*/
export function isAssociation(element: model.Element | null): element is model.Association {
	if (!element) return false;
	return ElementTypeUtility.isAssociation(element.elementType);
}
