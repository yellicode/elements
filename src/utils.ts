/*
* Copyright (c) 2019 Yellicode
*
* This Source Code Form is subject to the terms of the Mozilla Public
* License, v. 2.0. If a copy of the MPL was not distributed with this
* file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

/**
* This code was generated by a tool.
* 
* Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
*/
import * as elements from './interfaces';

export class ElementTypeUtility
{
	/**
	* Returns true if the elementType is a NamedElement or one of its descendants.
	*/
	public static isNamedElement(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.association: return true;
			case elements.ElementType.class: return true;
			case elements.ElementType.dataType: return true;
			case elements.ElementType.enumeration: return true;
			case elements.ElementType.enumerationLiteral: return true;
			case elements.ElementType.interface: return true;
			case elements.ElementType.literalBoolean: return true;
			case elements.ElementType.literalInteger: return true;
			case elements.ElementType.literalNull: return true;
			case elements.ElementType.literalReal: return true;
			case elements.ElementType.literalString: return true;
			case elements.ElementType.literalUnlimitedNatural: return true;
			case elements.ElementType.model: return true;
			case elements.ElementType.operation: return true;
			case elements.ElementType.package: return true;
			case elements.ElementType.parameter: return true;
			case elements.ElementType.primitiveType: return true;
			case elements.ElementType.profile: return true;
			case elements.ElementType.property: return true;
			case elements.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a TypedElement or one of its descendants.
	*/
	public static isTypedElement(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.literalBoolean: return true;
			case elements.ElementType.literalInteger: return true;
			case elements.ElementType.literalNull: return true;
			case elements.ElementType.literalReal: return true;
			case elements.ElementType.literalString: return true;
			case elements.ElementType.literalUnlimitedNatural: return true;
			case elements.ElementType.parameter: return true;
			case elements.ElementType.property: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a ValueSpecification or one of its descendants.
	*/
	public static isValueSpecification(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.literalBoolean: return true;
			case elements.ElementType.literalInteger: return true;
			case elements.ElementType.literalNull: return true;
			case elements.ElementType.literalReal: return true;
			case elements.ElementType.literalString: return true;
			case elements.ElementType.literalUnlimitedNatural: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a PackageableElement or one of its descendants.
	*/
	public static isPackageableElement(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.association: return true;
			case elements.ElementType.class: return true;
			case elements.ElementType.dataType: return true;
			case elements.ElementType.enumeration: return true;
			case elements.ElementType.interface: return true;
			case elements.ElementType.model: return true;
			case elements.ElementType.package: return true;
			case elements.ElementType.primitiveType: return true;
			case elements.ElementType.profile: return true;
			case elements.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Type or one of its descendants.
	*/
	public static isType(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.association: return true;
			case elements.ElementType.class: return true;
			case elements.ElementType.dataType: return true;
			case elements.ElementType.enumeration: return true;
			case elements.ElementType.interface: return true;
			case elements.ElementType.primitiveType: return true;
			case elements.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a RedefinableElement or one of its descendants.
	*/
	public static isRedefinableElement(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.association: return true;
			case elements.ElementType.class: return true;
			case elements.ElementType.dataType: return true;
			case elements.ElementType.enumeration: return true;
			case elements.ElementType.interface: return true;
			case elements.ElementType.operation: return true;
			case elements.ElementType.primitiveType: return true;
			case elements.ElementType.property: return true;
			case elements.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Classifier or one of its descendants.
	*/
	public static isClassifier(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.association: return true;
			case elements.ElementType.class: return true;
			case elements.ElementType.dataType: return true;
			case elements.ElementType.enumeration: return true;
			case elements.ElementType.interface: return true;
			case elements.ElementType.primitiveType: return true;
			case elements.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a StructuredClassifier or one of its descendants.
	*/
	public static isStructuredClassifier(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.class: return true;
			case elements.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a MultiplicityElement or one of its descendants.
	*/
	public static isMultiplicityElement(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.parameter: return true;
			case elements.ElementType.property: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a OrderedElement or one of its descendants.
	*/
	public static isOrderedElement(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.enumerationLiteral: return true;
			case elements.ElementType.operation: return true;
			case elements.ElementType.parameter: return true;
			case elements.ElementType.property: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Feature or one of its descendants.
	*/
	public static isFeature(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.operation: return true;
			case elements.ElementType.property: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a StructuralFeature or one of its descendants.
	*/
	public static isStructuralFeature(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.property;
	}

	/**
	* Returns true if the elementType is a MemberedClassifier or one of its descendants.
	*/
	public static isMemberedClassifier(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.class: return true;
			case elements.ElementType.dataType: return true;
			case elements.ElementType.enumeration: return true;
			case elements.ElementType.interface: return true;
			case elements.ElementType.primitiveType: return true;
			case elements.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a BehavioredClassifier or one of its descendants.
	*/
	public static isBehavioredClassifier(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.class: return true;
			case elements.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Class or one of its descendants.
	*/
	public static isClass(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.class: return true;
			case elements.ElementType.stereotype: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Stereotype or one of its descendants.
	*/
	public static isStereotype(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.stereotype;
	}

	/**
	* Returns true if the elementType is a Relationship or one of its descendants.
	*/
	public static isRelationship(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.association: return true;
			case elements.ElementType.generalization: return true;
			case elements.ElementType.interfaceRealization: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Property or one of its descendants.
	*/
	public static isProperty(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.property;
	}

	/**
	* Returns true if the elementType is a Package or one of its descendants.
	*/
	public static isPackage(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.package: return true;
			case elements.ElementType.model: return true;
			case elements.ElementType.profile: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a Profile or one of its descendants.
	*/
	public static isProfile(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.profile;
	}

	/**
	* Returns true if the elementType is a DataType or one of its descendants.
	*/
	public static isDataType(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.dataType: return true;
			case elements.ElementType.enumeration: return true;
			case elements.ElementType.primitiveType: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a PrimitiveType or one of its descendants.
	*/
	public static isPrimitiveType(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.primitiveType;
	}

	/**
	* Returns true if the elementType is a Parameter or one of its descendants.
	*/
	public static isParameter(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.parameter;
	}

	/**
	* Returns true if the elementType is a BehavioralFeature or one of its descendants.
	*/
	public static isBehavioralFeature(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.operation;
	}

	/**
	* Returns true if the elementType is a Operation or one of its descendants.
	*/
	public static isOperation(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.operation;
	}

	/**
	* Returns true if the elementType is a Model or one of its descendants.
	*/
	public static isModel(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.model;
	}

	/**
	* Returns true if the elementType is a LiteralSpecification or one of its descendants.
	*/
	public static isLiteralSpecification(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.literalBoolean: return true;
			case elements.ElementType.literalInteger: return true;
			case elements.ElementType.literalNull: return true;
			case elements.ElementType.literalReal: return true;
			case elements.ElementType.literalString: return true;
			case elements.ElementType.literalUnlimitedNatural: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a LiteralUnlimitedNatural or one of its descendants.
	*/
	public static isLiteralUnlimitedNatural(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.literalUnlimitedNatural;
	}

	/**
	* Returns true if the elementType is a LiteralString or one of its descendants.
	*/
	public static isLiteralString(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.literalString;
	}

	/**
	* Returns true if the elementType is a LiteralReal or one of its descendants.
	*/
	public static isLiteralReal(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.literalReal;
	}

	/**
	* Returns true if the elementType is a LiteralNull or one of its descendants.
	*/
	public static isLiteralNull(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.literalNull;
	}

	/**
	* Returns true if the elementType is a LiteralInteger or one of its descendants.
	*/
	public static isLiteralInteger(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.literalInteger;
	}

	/**
	* Returns true if the elementType is a LiteralBoolean or one of its descendants.
	*/
	public static isLiteralBoolean(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.literalBoolean;
	}

	/**
	* Returns true if the elementType is a DirectedRelationship or one of its descendants.
	*/
	public static isDirectedRelationship(elementType:elements.ElementType): boolean
	{
		switch(elementType){
			case elements.ElementType.generalization: return true;
			case elements.ElementType.interfaceRealization: return true;
			default: return false;
		}
	}

	/**
	* Returns true if the elementType is a InterfaceRealization or one of its descendants.
	*/
	public static isInterfaceRealization(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.interfaceRealization;
	}

	/**
	* Returns true if the elementType is a Interface or one of its descendants.
	*/
	public static isInterface(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.interface;
	}

	/**
	* Returns true if the elementType is a Generalization or one of its descendants.
	*/
	public static isGeneralization(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.generalization;
	}

	/**
	* Returns true if the elementType is a EnumerationLiteral or one of its descendants.
	*/
	public static isEnumerationLiteral(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.enumerationLiteral;
	}

	/**
	* Returns true if the elementType is a Enumeration or one of its descendants.
	*/
	public static isEnumeration(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.enumeration;
	}

	/**
	* Returns true if the elementType is a Comment or one of its descendants.
	*/
	public static isComment(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.comment;
	}

	/**
	* Returns true if the elementType is a Association or one of its descendants.
	*/
	public static isAssociation(elementType:elements.ElementType): boolean
	{
		return elementType === elements.ElementType.association;
	}

}

/**
* Asserts that the element is a NamedElement or one of its descendants.
*/
export function isNamedElement(element: elements.Element | null): element is elements.NamedElement {
	if (!element) return false;
	return ElementTypeUtility.isNamedElement(element.elementType);
}

/**
* Asserts that the element is a TypedElement or one of its descendants.
*/
export function isTypedElement(element: elements.Element | null): element is elements.TypedElement {
	if (!element) return false;
	return ElementTypeUtility.isTypedElement(element.elementType);
}

/**
* Asserts that the element is a ValueSpecification or one of its descendants.
*/
export function isValueSpecification(element: elements.Element | null): element is elements.ValueSpecification {
	if (!element) return false;
	return ElementTypeUtility.isValueSpecification(element.elementType);
}

/**
* Asserts that the element is a PackageableElement or one of its descendants.
*/
export function isPackageableElement(element: elements.Element | null): element is elements.PackageableElement {
	if (!element) return false;
	return ElementTypeUtility.isPackageableElement(element.elementType);
}

/**
* Asserts that the element is a Type or one of its descendants.
*/
export function isType(element: elements.Element | null): element is elements.Type {
	if (!element) return false;
	return ElementTypeUtility.isType(element.elementType);
}

/**
* Asserts that the element is a RedefinableElement or one of its descendants.
*/
export function isRedefinableElement(element: elements.Element | null): element is elements.RedefinableElement {
	if (!element) return false;
	return ElementTypeUtility.isRedefinableElement(element.elementType);
}

/**
* Asserts that the element is a Classifier or one of its descendants.
*/
export function isClassifier(element: elements.Element | null): element is elements.Classifier {
	if (!element) return false;
	return ElementTypeUtility.isClassifier(element.elementType);
}

/**
* Asserts that the element is a StructuredClassifier or one of its descendants.
*/
export function isStructuredClassifier(element: elements.Element | null): element is elements.StructuredClassifier {
	if (!element) return false;
	return ElementTypeUtility.isStructuredClassifier(element.elementType);
}

/**
* Asserts that the element is a MultiplicityElement or one of its descendants.
*/
export function isMultiplicityElement(element: elements.Element | null): element is elements.MultiplicityElement {
	if (!element) return false;
	return ElementTypeUtility.isMultiplicityElement(element.elementType);
}

/**
* Asserts that the element is a OrderedElement or one of its descendants.
*/
export function isOrderedElement(element: elements.Element | null): element is elements.OrderedElement {
	if (!element) return false;
	return ElementTypeUtility.isOrderedElement(element.elementType);
}

/**
* Asserts that the element is a Feature or one of its descendants.
*/
export function isFeature(element: elements.Element | null): element is elements.Feature {
	if (!element) return false;
	return ElementTypeUtility.isFeature(element.elementType);
}

/**
* Asserts that the element is a StructuralFeature or one of its descendants.
*/
export function isStructuralFeature(element: elements.Element | null): element is elements.StructuralFeature {
	if (!element) return false;
	return ElementTypeUtility.isStructuralFeature(element.elementType);
}

/**
* Asserts that the element is a MemberedClassifier or one of its descendants.
*/
export function isMemberedClassifier(element: elements.Element | null): element is elements.MemberedClassifier {
	if (!element) return false;
	return ElementTypeUtility.isMemberedClassifier(element.elementType);
}

/**
* Asserts that the element is a BehavioredClassifier or one of its descendants.
*/
export function isBehavioredClassifier(element: elements.Element | null): element is elements.BehavioredClassifier {
	if (!element) return false;
	return ElementTypeUtility.isBehavioredClassifier(element.elementType);
}

/**
* Asserts that the element is a Class or one of its descendants.
*/
export function isClass(element: elements.Element | null): element is elements.Class {
	if (!element) return false;
	return ElementTypeUtility.isClass(element.elementType);
}

/**
* Asserts that the element is a Stereotype or one of its descendants.
*/
export function isStereotype(element: elements.Element | null): element is elements.Stereotype {
	if (!element) return false;
	return ElementTypeUtility.isStereotype(element.elementType);
}

/**
* Asserts that the element is a Relationship or one of its descendants.
*/
export function isRelationship(element: elements.Element | null): element is elements.Relationship {
	if (!element) return false;
	return ElementTypeUtility.isRelationship(element.elementType);
}

/**
* Asserts that the element is a Property or one of its descendants.
*/
export function isProperty(element: elements.Element | null): element is elements.Property {
	if (!element) return false;
	return ElementTypeUtility.isProperty(element.elementType);
}

/**
* Asserts that the element is a Package or one of its descendants.
*/
export function isPackage(element: elements.Element | null): element is elements.Package {
	if (!element) return false;
	return ElementTypeUtility.isPackage(element.elementType);
}

/**
* Asserts that the element is a Profile or one of its descendants.
*/
export function isProfile(element: elements.Element | null): element is elements.Profile {
	if (!element) return false;
	return ElementTypeUtility.isProfile(element.elementType);
}

/**
* Asserts that the element is a DataType or one of its descendants.
*/
export function isDataType(element: elements.Element | null): element is elements.DataType {
	if (!element) return false;
	return ElementTypeUtility.isDataType(element.elementType);
}

/**
* Asserts that the element is a PrimitiveType or one of its descendants.
*/
export function isPrimitiveType(element: elements.Element | null): element is elements.PrimitiveType {
	if (!element) return false;
	return ElementTypeUtility.isPrimitiveType(element.elementType);
}

/**
* Asserts that the element is a Parameter or one of its descendants.
*/
export function isParameter(element: elements.Element | null): element is elements.Parameter {
	if (!element) return false;
	return ElementTypeUtility.isParameter(element.elementType);
}

/**
* Asserts that the element is a BehavioralFeature or one of its descendants.
*/
export function isBehavioralFeature(element: elements.Element | null): element is elements.BehavioralFeature {
	if (!element) return false;
	return ElementTypeUtility.isBehavioralFeature(element.elementType);
}

/**
* Asserts that the element is a Operation or one of its descendants.
*/
export function isOperation(element: elements.Element | null): element is elements.Operation {
	if (!element) return false;
	return ElementTypeUtility.isOperation(element.elementType);
}

/**
* Asserts that the element is a Model or one of its descendants.
*/
export function isModel(element: elements.Element | null): element is elements.Model {
	if (!element) return false;
	return ElementTypeUtility.isModel(element.elementType);
}

/**
* Asserts that the element is a LiteralSpecification or one of its descendants.
*/
export function isLiteralSpecification(element: elements.Element | null): element is elements.LiteralSpecification {
	if (!element) return false;
	return ElementTypeUtility.isLiteralSpecification(element.elementType);
}

/**
* Asserts that the element is a LiteralUnlimitedNatural or one of its descendants.
*/
export function isLiteralUnlimitedNatural(element: elements.Element | null): element is elements.LiteralUnlimitedNatural {
	if (!element) return false;
	return ElementTypeUtility.isLiteralUnlimitedNatural(element.elementType);
}

/**
* Asserts that the element is a LiteralString or one of its descendants.
*/
export function isLiteralString(element: elements.Element | null): element is elements.LiteralString {
	if (!element) return false;
	return ElementTypeUtility.isLiteralString(element.elementType);
}

/**
* Asserts that the element is a LiteralReal or one of its descendants.
*/
export function isLiteralReal(element: elements.Element | null): element is elements.LiteralReal {
	if (!element) return false;
	return ElementTypeUtility.isLiteralReal(element.elementType);
}

/**
* Asserts that the element is a LiteralNull or one of its descendants.
*/
export function isLiteralNull(element: elements.Element | null): element is elements.LiteralNull {
	if (!element) return false;
	return ElementTypeUtility.isLiteralNull(element.elementType);
}

/**
* Asserts that the element is a LiteralInteger or one of its descendants.
*/
export function isLiteralInteger(element: elements.Element | null): element is elements.LiteralInteger {
	if (!element) return false;
	return ElementTypeUtility.isLiteralInteger(element.elementType);
}

/**
* Asserts that the element is a LiteralBoolean or one of its descendants.
*/
export function isLiteralBoolean(element: elements.Element | null): element is elements.LiteralBoolean {
	if (!element) return false;
	return ElementTypeUtility.isLiteralBoolean(element.elementType);
}

/**
* Asserts that the element is a DirectedRelationship or one of its descendants.
*/
export function isDirectedRelationship(element: elements.Element | null): element is elements.DirectedRelationship {
	if (!element) return false;
	return ElementTypeUtility.isDirectedRelationship(element.elementType);
}

/**
* Asserts that the element is a InterfaceRealization or one of its descendants.
*/
export function isInterfaceRealization(element: elements.Element | null): element is elements.InterfaceRealization {
	if (!element) return false;
	return ElementTypeUtility.isInterfaceRealization(element.elementType);
}

/**
* Asserts that the element is a Interface or one of its descendants.
*/
export function isInterface(element: elements.Element | null): element is elements.Interface {
	if (!element) return false;
	return ElementTypeUtility.isInterface(element.elementType);
}

/**
* Asserts that the element is a Generalization or one of its descendants.
*/
export function isGeneralization(element: elements.Element | null): element is elements.Generalization {
	if (!element) return false;
	return ElementTypeUtility.isGeneralization(element.elementType);
}

/**
* Asserts that the element is a EnumerationLiteral or one of its descendants.
*/
export function isEnumerationLiteral(element: elements.Element | null): element is elements.EnumerationLiteral {
	if (!element) return false;
	return ElementTypeUtility.isEnumerationLiteral(element.elementType);
}

/**
* Asserts that the element is a Enumeration or one of its descendants.
*/
export function isEnumeration(element: elements.Element | null): element is elements.Enumeration {
	if (!element) return false;
	return ElementTypeUtility.isEnumeration(element.elementType);
}

/**
* Asserts that the element is a Comment or one of its descendants.
*/
export function isComment(element: elements.Element | null): element is elements.Comment {
	if (!element) return false;
	return ElementTypeUtility.isComment(element.elementType);
}

/**
* Asserts that the element is a Association or one of its descendants.
*/
export function isAssociation(element: elements.Element | null): element is elements.Association {
	if (!element) return false;
	return ElementTypeUtility.isAssociation(element.elementType);
}
